# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#  
#   http://www.apache.org/licenses/LICENSE-2.0
#  
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.  


##AuthenticationServletFilter
errorParsingSecureToken=The input secure token or credential is malform and can not be parsed.

##XmlUtil
errorParsingXML=Error parsing the XML. This can be ignored.
errorParsingExternalEntities=XML parsers will load external general entities.
errorParsingExternalDTD=XML parsers will load external DTDs.
errorNotUsingSecureXML=Not using secure XML processing.
reuseDocumentBuilders=Reusing document builders.
notReuseDocBuilders=Not reusing document builders.

##LruCacheProvider
LRUCapacity={0} LRU capacity configured for {1}.

##DynamicConfigProperty
evalExpressionFailed=Evaluation of {0} failed.

##JsonContainerConfigLoader
readingContainerConfig=Reading container config: {0}.
loadFromString=Trouble parsing {0}.

##JsonContainerConfigLoader, FeatureRegistry
loadResourcesFrom=Loading resources from {0}.

##JsonContainerConfigLoader, FeatureRegistry
loadFilesFrom=Loading files from{0}

##ApiServlet
apiServletProtocalException=Returning a response error as result of a protocol exception.
apiServletException=Returning a response error as result of a protocol exception.

##FeatureRegistry
overridingFeature=Overriding feature: {0} with definition at: {1}

##FeatureResourceLoader
missingFile=File existed before but is now missing! Name: {0}
unableRetriveLib=Unable to retrieve remote library from: {0}

##BasicHttpFetcher
timeoutException=Timeout for {0} Exception: {1} - {2} - {3} ms
exceptionOccurred=Got Exception fetching {0} - {1} ms
slowResponse=Slow response from {0} {1} ms

##HttpResponseMetadataHelper
errorGettingMD5=Error getting MD5 digest, ignored
errorParsingMD5=Error parsing MD5 string as UTF8
 
##OAuthModule     
usingRandomKey=Using random key for OAuth client-side state encryption
usingFile=Using file {0} for OAuth client-side state encryption
loadKeyFileFrom=Loading OAuth signing key from {0}
couldNotLoadKeyFile=Couldn't load key file {0}
couldNotLoadSignedKey=Couldn''t load OAuth signing key.  To create a key, run:\n openssl req -newkey rsa:1024 -days 365 -nodes -x509 -keyout testkey.pem \\\n -out testkey.pem -subj '/CN=mytestkey'\n openssl pkcs8 -in testkey.pem -out oauthkey.pem -topk8 -nocrypt -outform PEM\n\n Then edit shindig.properties and add these lines:\n {0} =<path-to-oauthkey.pem>\n {1} =mykey\n
failedToInit=Failed to initialize OAuth consumers from {0}

##OAuthRequest
oauthFetchFatalError=OAuth fetch fatal error \n {0}
oauthFetchErrorReprompt=OAuth fetch error, reprompting for user approval \n {0}
bogusExpired=server returned bogus expiration \n {0}
oauthFetchUnexpectedError=OAuth fetch unexpected fatal error \n {0}
unauthenticatedOauth=Unauthenticated OAuth fetch \n {0}
invalidOauth=Invalid OAuth fetch request \n {0}

##CajaCssSanitizer
failedToParse=Failed to parse stylesheet
unableToConvertScript=Unable to convert script node to an osml tag

##PipelineExecutor
errorPreloading=Unexpected error when preloading

##Processor
renderBlacklistedGadget=Attempted to render blacklisted gadget: {0}

##CajaResponseRewriter, CajaContentRewriter
failedToRetrieve=Failed to retrieve {0}
failedToRead=Failed to read {0}

##DefaultServiceFetcher
httpErrorFetching=HTTP Error {0} fetching service methods from endpoint {1}
failedToFetchService=Failed to fetch services methods from endpoint {0}. Error {1}
failedToParseService=Failed to parse services methods from endpoint {0} {1}

##Renderer
FailedToRender=Failed to render gadget {0}: {1}

##RenderingGadgetRewriter
unknownFeatures=Unknown feature(s) in extern &libs=: {0}
unexpectedErrorPreloading=Unexpected error when preloading

##SanitizingResponseRewriter
requestToSanitizeWithoutContent=Request to sanitize without content type for{0}
requestToSanitizeUnknownContent=Request to sanitize unknown content type {0} for {1}
unableToSanitizeUnknownImg=Unable to sanitize unknown image type {0}
unableToDetectImgType=Unable to detect image type for {0} for sanitized content

##BasicImageRewriter
ioErrorRewritingImg=IO Error rewriting image {0} - {1}
unknownErrorRewritingImg=Unknown error rewriting image {0} {1}
failedToReadImg=Failed to read image. Skipping {0} {1}

##CssResponseRewriter
cajaCssParseFailure=Caja CSS parse failure: {0} for {1}

##ImageAttributeRewriter
unableToProcessImg=Unable to process the image resource {0}
unableToReadResponse=Unable to read reponnse for the image resource {0}
unableToFetchImg=Unable to fetch the image resource {0}
unableToParseImg=Unable to parse the image resource {0}

##MutableContent
exceptionParsingContent=Got GadgetException when parsing content

##PipelineDataGadgetRewriter
failedToParsePreload=Failed to parse preload in {0}

##ProxyingVisitor
uriExceptionParsing=Uri exception when parsing: {0}

##TemplateRewriter
malformedTemplateLib=Exceptions due to malformed template libraries

##CajaContnetRewriter
cajoledCacheCreated=Cajoled cache created
retrieveReference=Retrieving: {0}
unableToCajole=Unable to cajole gadget: {0}

##ConcatProxyServlet
concatProxyRequestFailed=Concat proxy request failed {0}

##GadgetRenderingServlet
malformedTtlValue=Bad TTL value {0} was ignored

##ProxyServlet
embededImgWrongDomain=Embed request for url {0} made to wrong domain {1}

##DefaultTemplateProcessor
elFailure=EL failure for gadget {0}: {1}

##UriUtils
skipIllegalHeader=Skipping illegal header: {0} : {1}

##AbstractSpecFactory
updateSpecFailureUseCacheVersion=Failed to update {0}. Using cached version.
updateSpecFailureApplyNegCache=Failed to update {0}. Applying negative cache.

##HashLockedDomainService
noLocakedDomainConfig=No locked domain configuration for {0}

##Bootstrap
startingConnManagerWith=Starting connection manager with properties {0}

##XSDValidator
resolveResource=resolveResource( {0}, {1}, {2}, {3} )
failedToValidate=Failed to validate {0}
